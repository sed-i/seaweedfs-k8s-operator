# Copyright 2025 him
# See LICENSE file for licensing details.

[tox]
no_package = True
skip_missing_interpreters = True
env_list = fmt, lint, static, unit
min_version = 4.0.0

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
;lib_path = {tox_root}/lib/charms/operator_name_with_underscores
all_path = {[vars]src_path} {[vars]tests_path}

[testenv]
allowlist_externals = uv
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_PATH

[testenv:fmt]
description = Apply coding style standards to code
deps =
    ruff
commands =
    ruff format {[vars]all_path}
    ruff check --fix {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    ruff
    codespell
commands =
    # if this charm owns a lib, uncomment "lib_path" variable
    # and uncomment the following line
    # codespell {[vars]lib_path}
    codespell {tox_root}
    ruff check {[vars]all_path}
    ruff format --check --diff {[vars]all_path}

[testenv:lock]
description = Update uv.lock with the latest deps
commands =
  uv lock --upgrade --no-cache

[testenv:lint]
description = Lint the code
commands =
    uv run {[vars]uv_flags} ruff check {[vars]all_path}

[testenv:static]
description = Run static checks
allowlist_externals =
  {[testenv]allowlist_externals}
  /usr/bin/env
commands =
    uv run {[vars]uv_flags} pyright {[vars]all_path}
    /usr/bin/env sh -c 'for m in $(git diff main --name-only {[vars]lib_path}); do if ! git diff main $m | grep -q "+LIBPATCH\|+LIBAPI"; then echo "You forgot to bump the version on $m!"; exit 1; fi; done'

[testenv:fmt]
description = "Format the code"
commands =
    uv run {[vars]uv_flags} ruff check --fix-only {[vars]all_path}

[testenv:unit]
description = Run unit tests
setenv =
  {[testenv]setenv}
  JUJU_VERSION=3.0.3
passenv = 
    PYTHONPATH
allowlist_externals =
  {[testenv]allowlist_externals}
  /usr/bin/env
commands =
    uv run {[vars]uv_flags} coverage run --source={[vars]src_path},{[vars]lib_path} -m pytest \
        {[vars]tst_path}/unit {posargs}
    uv run {[vars]uv_flags} coverage report

[testenv:integration]
description = Run integration tests
commands =
    uv run {[vars]uv_flags} pytest --exitfirst {[vars]tst_path}/integration {posargs}